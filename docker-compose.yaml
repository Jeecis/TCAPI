services:
  app:
    build: .
    container_name: my_flask_app
    restart: always
    env_file:
      - .env
    ports:
      - "5000:5000"  # Internal port Flask is using
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.myapp.rule=Host(`pyapi.chudars.lv`)"
      - "traefik.http.routers.myapp.entrypoints=websecure"  # Use HTTPS entry point
      - "traefik.http.routers.myapp.tls=true"  # Enable TLS
      - "traefik.http.routers.myapp.tls.certresolver=le"  # Set certificate resolver to le (Let's Encrypt)
      - "traefik.http.services.myapp.loadbalancer.server.port=5000" 
    networks:
      - web

  traefik:
    image: traefik:v3.2
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"  # HTTPS entry point
      - "--certificatesresolvers.le.acme.tlschallenge=true"  # Use TLS-ALPN-01 challenge
      - "--certificatesresolvers.le.acme.email=jekabs777@yahoo.com"  # Replace with your email
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"  # Path to store cert data
    ports:
      - "80:80"   # Redirects HTTP traffic
      - "443:443"  # HTTPS
      - "8080:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"  # Mount to store Let's Encrypt certificates
    networks:
      - web
  
  user_redis:
    image: redis:latest
    container_name: user_redis
    ports:
      - "6379:6379"  # Exposes Redis on the default port
    volumes:
      - user_data:/data  # Persists data in a named volume
    environment:
      - REDIS_REPLICATION_MODE=master
    restart: unless-stopped
    networks:
      - web  # Separate network for database communication

  booking_redis:
    image: redis:latest
    container_name: booking_redis
    ports:
      - "6380:6379"  # Exposes Redis on the default port
    volumes:
      - booking_data:/data  # Persists data in a named volume
    environment:
      - REDIS_REPLICATION_MODE=master
    restart: unless-stopped
    networks:
      - web  # Separate network for database communication
  
  inventory_redis:
    image: redis:latest
    container_name: inventory_redis
    ports:
      - "6381:6379"  # Exposes Redis on the default port
    volumes:
      - inventory_data:/data  # Persists data in a named volume
    environment:
      - REDIS_REPLICATION_MODE=master
    restart: unless-stopped
    networks:
      - web  # Separate network for database communication

networks:
  web:
    driver: bridge

volumes:
  user_data:
  booking_data:
  inventory_data: